"""Rename id column to request_id in transcription_requests

Revision ID: db3cb9363c0b
Revises: 7a813374f718
Create Date: 2025-08-15 10:55:13.103597

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'db3cb9363c0b'
down_revision: Union[str, None] = '7a813374f718'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add new request_id column (nullable first)
    op.add_column('transcription_requests', sa.Column('request_id', sa.String(length=50), nullable=True))
    
    # Step 2: Copy existing id values to request_id
    op.execute("UPDATE transcription_requests SET request_id = id")
    
    # Step 3: Make request_id NOT NULL and set as primary key
    op.alter_column('transcription_requests', 'request_id', nullable=False)
    op.drop_constraint('transcription_requests_pkey', 'transcription_requests', type_='primary')
    op.create_primary_key('transcription_requests_pkey', 'transcription_requests', ['request_id'])
    
    # Step 4: Create index for request_id
    op.create_index(op.f('ix_transcription_requests_request_id'), 'transcription_requests', ['request_id'], unique=False)
    
    # Step 5: Drop old id column
    op.drop_column('transcription_requests', 'id')
    
    # Step 6: Create index for transcription_responses.request_id (if not exists)
    op.create_index(op.f('ix_transcription_responses_request_id'), 'transcription_responses', ['request_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Drop transcription_responses index
    op.drop_index(op.f('ix_transcription_responses_request_id'), table_name='transcription_responses')
    
    # Step 2: Add back id column (nullable first)
    op.add_column('transcription_requests', sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    
    # Step 3: Copy request_id values back to id
    op.execute("UPDATE transcription_requests SET id = request_id")
    
    # Step 4: Make id NOT NULL and set as primary key
    op.alter_column('transcription_requests', 'id', nullable=False)
    op.drop_constraint('transcription_requests_pkey', 'transcription_requests', type_='primary')
    op.create_primary_key('transcription_requests_pkey', 'transcription_requests', ['id'])
    
    # Step 5: Drop request_id column and its index
    op.drop_index(op.f('ix_transcription_requests_request_id'), table_name='transcription_requests')
    op.drop_column('transcription_requests', 'request_id')
    # ### end Alembic commands ###
