"""add_user_uuid_column_to_users_table

Revision ID: bc99f084d1a1
Revises: dd014ace9a00
Create Date: 2025-08-14 23:11:28.011617

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bc99f084d1a1'
down_revision: Union[str, None] = 'dd014ace9a00'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First add the column as nullable
    op.add_column('users', sa.Column('user_uuid', sa.String(length=36), nullable=True))
    
    # Generate UUIDs for existing users
    import uuid
    from sqlalchemy import text
    connection = op.get_bind()
    
    # Get all existing users without user_uuid
    result = connection.execute(text("SELECT id FROM users WHERE user_uuid IS NULL"))
    user_ids = [row[0] for row in result]
    
    # Update each user with a new UUID
    for user_id in user_ids:
        new_uuid = str(uuid.uuid4())
        connection.execute(
            text("UPDATE users SET user_uuid = :uuid WHERE id = :id"),
            {"uuid": new_uuid, "id": user_id}
        )
    
    # Now make the column NOT NULL
    op.alter_column('users', 'user_uuid', nullable=False)
    
    # Create unique index
    op.create_index(op.f('ix_users_user_uuid'), 'users', ['user_uuid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_user_uuid'), table_name='users')
    op.drop_column('users', 'user_uuid')
    # ### end Alembic commands ###
