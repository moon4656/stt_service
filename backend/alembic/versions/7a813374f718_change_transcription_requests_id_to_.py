"""Change transcription_requests id to string format

Revision ID: 7a813374f718
Revises: 3259811907a1
Create Date: 2025-08-15 10:46:19.531256

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7a813374f718'
down_revision: Union[str, None] = '3259811907a1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. 임시 컬럼 추가
    op.add_column('transcription_requests', sa.Column('new_id', sa.String(length=50), nullable=True))
    op.add_column('transcription_responses', sa.Column('new_request_id', sa.String(length=50), nullable=True))
    
    # 2. 기존 데이터를 새로운 형태로 변환
    connection = op.get_bind()
    
    # transcription_requests 테이블의 기존 ID를 새로운 형태로 변환
    result = connection.execute(sa.text("SELECT id FROM transcription_requests"))
    for row in result:
        old_id = row[0]
        # 기존 ID를 기반으로 새로운 형태의 ID 생성 (날짜-시간-UUID 형태)
        import uuid
        from datetime import datetime
        now = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
        unique = uuid.uuid4().hex[:8]
        new_id = f"{now}-{unique}-{old_id}"
        
        connection.execute(
            sa.text("UPDATE transcription_requests SET new_id = :new_id WHERE id = :old_id"),
            {"new_id": new_id, "old_id": old_id}
        )
        
        # transcription_responses 테이블의 request_id도 업데이트
        connection.execute(
            sa.text("UPDATE transcription_responses SET new_request_id = :new_id WHERE request_id = :old_id"),
            {"new_id": new_id, "old_id": old_id}
        )
    
    # 3. 기존 컬럼 삭제 및 새 컬럼을 기본 컬럼으로 변경
    op.drop_constraint('transcription_requests_pkey', 'transcription_requests', type_='primary')
    op.drop_column('transcription_requests', 'id')
    op.alter_column('transcription_requests', 'new_id', new_column_name='id', nullable=False)
    op.create_primary_key('transcription_requests_pkey', 'transcription_requests', ['id'])
    
    op.drop_column('transcription_responses', 'request_id')
    op.alter_column('transcription_responses', 'new_request_id', new_column_name='request_id', nullable=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('transcription_responses', 'request_id',
               existing_type=sa.String(length=50),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('transcription_requests', 'id',
               existing_type=sa.String(length=50),
               type_=sa.INTEGER(),
               existing_nullable=False)
    # ### end Alembic commands ###
